@using PartDesk.Domain.Enums
@model System.Collections.Generic.List<PartDesk.Domain.Entities.Setting>

@{
    ViewBag.Title = "Настройки системы";
    Layout = "../Shared/AccountLayout.cshtml";
}

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="icon"><i class="icon20 i-settings"></i></div>
                <h4>Настройки системы</h4>
                <a href="#" class="minimize"></a>
            </div>
            <!-- End .panel-heading -->
            <div class="panel-body">
                <form action="/manage/settings/save" id="settings-form" role="form" class="form-horizontal" method="POST">
                    @{
                        var groups = Model.GroupBy(g => g.Group);
                    }
                    @foreach (var group in groups)
                    {
                        <div class="page-header">
                            <h4>@group.Key</h4>
                        </div>
                        foreach (var setting in group)
                        {
                            <div class="form-group">
                                <label class="col-lg-2 control-label" for="@setting.Key-field">@(setting.Description ?? setting.Key)</label>
                                <div class="col-lg-10">
                                    @switch ((SettingDataType) setting.DataType)
                                    {
                                        case SettingDataType.String:
                                            <input class="form-control required" name="@setting.Key" type="text" id="@setting.Key-field" value="@setting.Value"/>
                                            break;
                                        case SettingDataType.Digits:
                                            <input class="form-control required digits" name="@setting.Key" type="text" id="@setting.Key-field" value="@setting.Value"/>
                                            break;
                                    case SettingDataType.Boolean:
                                            <input type="checkbox" name="@setting.Key" id="@setting.Key-field" @(setting.Value == "true" ? "checked=checked":"")/>
                                            break;
                                        default:
                                            throw new ArgumentOutOfRangeException();
                                    }
                                </div>
                            </div>
                        }
                    }
                    <div class="form-group">
                        <div class="col-lg-offset-2">
                            <div class="pad-left15">
                                <button type="submit" class="btn btn-primary">Сохранить</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
